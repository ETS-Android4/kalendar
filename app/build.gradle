apply plugin: 'com.android.application'

ext.versionMajor = 2
ext.versionMinor = 4
ext.versionPatch = 0
ext.versionBuild = 1

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        versionCode generateVersionCode()
        versionName generateVersionName()
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        project.ext.archivesBaseName = "Kalendar-$versionName".toString()
    }

    buildTypes {
        release {
            minifyEnabled false
            lintOptions {
                warning 'MissingTranslation', 'InvalidPackage'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    lintOptions {
        abortOnError false
    }

    if (project.hasProperty('kalendarStoreFile')) {
        signingConfigs {
            releaseConfig {
                storeFile file(kalendarStoreFile)
                storePassword kalendarStorePassword
                keyAlias kalendarKeyAlias
                keyPassword kalendarKeyPassword
            }
        }
        buildTypes.release.signingConfig signingConfigs.releaseConfig
    }
    // See https://www.timroes.de/2013/09/22/handling-signing-configs-with-gradle/
    if (project.hasProperty("kalendar.signing")
            && new File(project.property("kalendar.signing").toString() + ".gradle").exists()) {
        apply from: project.property("kalendar.signing") + ".gradle";
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation "joda-time:joda-time:$jodaTimeVersion"
    implementation "com.jaredrummler:colorpicker:$colorPickerVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "androidx.test:core:$testCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
}

private Integer generateVersionCode() {
    return ext.versionMajor * 1000000 \
             + ext.versionMinor * 10000 \
             + ext.versionPatch * 100 \
             + ext.versionBuild
}

private String generateVersionName() {
    return "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
}
